`timescale 1ns / 1ps

module D_FF_new(
    input wire D,clk,preset,clear,
    output reg Q,Qn
    );
    
    initial 
    begin
      Q = 0;
      Qn = 1;
    end
    
    always @ ( clk or preset or clear or D)
    begin
      if (clk == 1 && preset == 1 && clear == 0)
        begin
          Q <= 1;
          Qn <= 0;
        end
        
      else if (clk == 1 && preset == 0 && clear == 1)
        begin
          Q <= 0;
          Qn <= 1;
        end
      else if (clk == 1 && preset == 1 && clear == 1)
        begin
          Q <= 1'b0;
          Qn <= 1'b1;
        end
      else if (clk == 1 && preset == 0 && clear == 0)
        begin
          Q <= D;
          Qn <= ~D;
        end
    end
endmodule
   
module D_FF (
    input D,clk,preset,clear,
    output Q
    );
    
    wire net1,Qn,Q_not;
    D_FF_new master (D,~clk,preset,clear,net1,Qn);
    D_FF_new slave (net1,clk,preset,clear,Q,Q_not); 
    
endmodule

module T_FF (
    input T,clk,preset,clear,
    output Q
    );
    
    wire D,Q_not; 
    xor (D,T,Q);
    
    D_FF inst6 (D,clk,preset,clear,Q);
    
endmodule

module PIPO_1x2 (                       //    L    load    output 
    input b,rslt,                      //     0      0       hold
    input load,L,clk,preset,clear,     //     x      1       b 
    output sub_in                      //     1      0       rslt
    );
    
    wire D;
    assign D = (b & load) | (rslt & L & ~load) | (sub_in & ~L & ~load);
    D_FF inst0 (D,clk,preset,clear,sub_in);
    
endmodule

module PIPO_16x2(
    input [15:0] b,rslt,
    input load,L,clk,preset,clear,
    output [15:0] sub_in
    );
    

    PIPO_1x2 inst0 (b[0],rslt[0],load,L,clk,preset,clear,sub_in[0]);
    PIPO_1x2 inst1 (b[1],rslt[1],load,L,clk,preset,clear,sub_in[1]);
    PIPO_1x2 inst2 (b[2],rslt[2],load,L,clk,preset,clear,sub_in[2]);
    PIPO_1x2 inst3 (b[3],rslt[3],load,L,clk,preset,clear,sub_in[3]);
    
    PIPO_1x2 inst4 (b[4],rslt[4],load,L,clk,preset,clear,sub_in[4]);
    PIPO_1x2 inst5 (b[5],rslt[5],load,L,clk,preset,clear,sub_in[5]);
    PIPO_1x2 inst6 (b[6],rslt[6],load,L,clk,preset,clear,sub_in[6]);
    PIPO_1x2 inst7 (b[7],rslt[7],load,L,clk,preset,clear,sub_in[7]);
    
    PIPO_1x2 inst8 (b[8],rslt[8],load,L,clk,preset,clear,sub_in[8]);
    PIPO_1x2 inst9 (b[9],rslt[9],load,L,clk,preset,clear,sub_in[9]);
    PIPO_1x2 inst10 (b[10],rslt[10],load,L,clk,preset,clear,sub_in[10]);
    PIPO_1x2 inst11 (b[11],rslt[11],load,L,clk,preset,clear,sub_in[11]);
    
    PIPO_1x2 inst12 (b[12],rslt[12],load,L,clk,preset,clear,sub_in[12]);
    PIPO_1x2 inst13 (b[13],rslt[13],load,L,clk,preset,clear,sub_in[13]);
    PIPO_1x2 inst14 (b[14],rslt[14],load,L,clk,preset,clear,sub_in[14]);
    PIPO_1x2 inst15 (b[15],rslt[15],load,L,clk,preset,clear,sub_in[15]);

endmodule


module PIPO_16x1(
    input inval,clk,sel,preset,clear,      // inval = value intake
    output [15:0] Q                            // sel = select wether value intake or not , sel = 1 value intake
    );

    wire Q0;
    
    assign Q0 = (Q[0] & ~sel) | (inval & sel);
    
    D_FF inst0 (Q0,clk,preset,clear,Q[15]);
    D_FF inst1 (Q[15],clk,preset,clear,Q[14]);
    D_FF inst2 (Q[14],clk,preset,clear,Q[13]);
    D_FF inst3 (Q[13],clk,preset,clear,Q[12]);
    
    D_FF inst4 (Q[12],clk,preset,clear,Q[11]);
    D_FF inst5 (Q[11],clk,preset,clear,Q[10]);
    D_FF inst6 (Q[10],clk,preset,clear,Q[9]);
    D_FF inst7 (Q[9],clk,preset,clear,Q[8]);
    
    D_FF inst8 (Q[8],clk,preset,clear,Q[7]);
    D_FF inst9 (Q[7],clk,preset,clear,Q[6]);
    D_FF inst10 (Q[6],clk,preset,clear,Q[5]);
    D_FF inst11 (Q[5],clk,preset,clear,Q[4]);
    
    D_FF inst12 (Q[4],clk,preset,clear,Q[3]);
    D_FF inst13 (Q[3],clk,preset,clear,Q[2]);
    D_FF inst14 (Q[2],clk,preset,clear,Q[1]);
    D_FF inst15 (Q[1],clk,preset,clear,Q[0]);
    
endmodule

module SIPO (
    input L,clk,sel,preset,clear,
    output [15:0] Q
    );
    
    wire clk_1;
    and #2 (clk_1,clk,sel);
    
    D_FF inst0 (L,clk_1,preset,clear,Q[0]);
    D_FF inst1 (Q[0],clk_1,preset,clear,Q[1]);
    D_FF inst2 (Q[1],clk_1,preset,clear,Q[2]);
    D_FF inst3 (Q[2],clk_1,preset,clear,Q[3]);
    
    D_FF inst4 (Q[3],clk_1,preset,clear,Q[4]);
    D_FF inst5 (Q[4],clk_1,preset,clear,Q[5]);
    D_FF inst6 (Q[5],clk_1,preset,clear,Q[6]);
    D_FF inst7 (Q[6],clk_1,preset,clear,Q[7]);
    
    D_FF inst8 (Q[7],clk_1,preset,clear,Q[8]);
    D_FF inst9 (Q[8],clk_1,preset,clear,Q[9]);
    D_FF inst10 (Q[9],clk_1,preset,clear,Q[10]);
    D_FF inst11 (Q[10],clk_1,preset,clear,Q[11]);
    
    D_FF inst12 (Q[11],clk_1,preset,clear,Q[12]);
    D_FF inst13 (Q[12],clk_1,preset,clear,Q[13]);
    D_FF inst14 (Q[13],clk_1,preset,clear,Q[14]);
    D_FF inst15 (Q[14],clk_1,preset,clear,Q[15]);
    
endmodule

// 32bit comparator
module comparator(                  // a < b means L
    input a,b,enable,               // a > b means G
    output L,E,G
    );
    wire net1;
    xnor (net1,a,b);
    and (E,net1,enable);
    and (G,a,~b,enable);
    and (L,~a,b,enable); 
    
endmodule

module comparator_16_bit(
    input [15:0] a,b,
    input enable,
    output L,E,G
    
    );
    

    wire [15:0] B;
    wire [15:0] l,g;
    
    comparator inst15 (a[15],b[15],enable,l[15],B[15],g[15]);
    comparator inst14 (a[14],b[14],B[15],l[14],B[14],g[14]);
    comparator inst13 (a[13],b[13],B[14],l[13],B[13],g[13]);
    comparator inst12 (a[12],b[12],B[13],l[12],B[12],g[12]);
    
    comparator inst11 (a[11],b[11],B[12],l[11],B[11],g[11]);
    comparator inst10 (a[10],b[10],B[11],l[10],B[10],g[10]);
    comparator inst9 (a[9],b[9],B[10],l[9],B[9],g[9]);
    comparator inst8 (a[8],b[8],B[9],l[8],B[8],g[8]);
    
    comparator inst7 (a[7],b[7],B[8],l[7],B[7],g[7]);
    comparator inst6 (a[6],b[6],B[7],l[6],B[6],g[6]);
    comparator inst5 (a[5],b[5],B[6],l[5],B[5],g[5]);
    comparator inst4 (a[4],b[4],B[5],l[4],B[4],g[4]);
    
    comparator inst3 (a[3],b[3],B[4],l[3],B[3],g[3]);
    comparator inst2 (a[2],b[2],B[3],l[2],B[2],g[2]);
    comparator inst1 (a[1],b[1],B[2],l[1],B[1],g[1]);
    comparator inst0 (a[0],b[0],B[1],l[0],E,g[0]);
    
    or (L,l[15],l[14],l[13],l[12],l[11],l[10],l[9],l[8],l[7],l[6],l[5],l[4],l[3],l[2],l[1],l[0]);
    or (G,g[15],g[14],g[13],g[12],g[11],g[10],g[9],g[8],g[7],g[6],g[5],g[4],g[3],g[2],g[1],g[0]);
    
endmodule     

module comparator_32_bit(
    input [31:0] a , b,
    output L,E,G
    );
    wire L0,L1,G0,G1,E0,E1;
    reg enb = 1'b1;
    
    comparator_16_bit comp_31x16 (a[31:16],b[31:16],enb,L0,E0,G0);
    comparator_16_bit comp_15x0 (a[15:0],b[15:0],E0,L1,E,G1);
    
    or (L,L0,L1);
    or (G,G0,G1);
    
endmodule

module mul_16x1 (
    input [15:0] a,
    input b,
    output [31:0] out
    );
    reg df = 1'b0;
    and (out[0],a[0],b), (out[1],a[1],b), (out[2],a[2],b), (out[3],a[3],b), (out[4],a[4],b),
        (out[5],a[5],b), (out[6],a[6],b), (out[6],a[6],b), (out[7],a[7],b), (out[8],a[8],b),
        (out[9],a[9],b), (out[10],a[10],b), (out[11],a[11],b), (out[12],a[12],b), (out[13],a[13],b),
        (out[14],a[14],b), (out[15],a[15],b), (out[16],df,b), (out[17],df,b), (out[18],df,b),
        (out[19],df,b),(out[20],df,b), (out[21],df,b),(out[22],df,b), (out[23],df,b),
        (out[24],df,b),(out[25],df,b), (out[26],df,b),(out[27],df,b), (out[28],df,b),(out[29],df,b),
        (out[30],df,b),(out[31],df,b);
    
endmodule

// multiplex for division circuit
module mul_16x1_div (
    input [15:0] a,b,
    input sel,
    output [15:0] out
    );
    
    assign out[0] = (a[0] & ~sel) | (b[0] & sel),
           out[1] = (a[1] & ~sel) | (b[1] & sel),
           out[2] = (a[2] & ~sel) | (b[2] & sel),
           out[3] = (a[3] & ~sel) | (b[3] & sel),
           out[4] = (a[4] & ~sel) | (b[4] & sel),
           out[5] = (a[5] & ~sel) | (b[5] & sel),
           out[6] = (a[6] & ~sel) | (b[6] & sel),
           out[7] = (a[7] & ~sel) | (b[7] & sel),
           out[8] = (a[8] & ~sel) | (b[8] & sel),
           out[9] = (a[9] & ~sel) | (b[9] & sel),
           out[10] = (a[10] & ~sel) | (b[10] & sel),
           out[11] = (a[11] & ~sel) | (b[11] & sel),
           out[12] = (a[12] & ~sel) | (b[12] & sel),
           out[13] = (a[13] & ~sel) | (b[13] & sel),
           out[14] = (a[14] & ~sel) | (b[14] & sel),
           out[15] = (a[15] & ~sel) | (b[15] & sel);
    
endmodule

module sub_clk_out (
    input [15:0] a,
    input clk,preset,clear,
    output [15:0] out
    );

    D_FF inst0 (a[0],clk,preset,clear,out[0]);
    D_FF inst1 (a[1],clk,preset,clear,out[1]);
    D_FF inst2 (a[2],clk,preset,clear,out[2]);
    D_FF inst3 (a[3],clk,preset,clear,out[3]);
    
    D_FF inst4 (a[4],clk,preset,clear,out[4]);
    D_FF inst5 (a[5],clk,preset,clear,out[5]);
    D_FF inst6 (a[6],clk,preset,clear,out[6]);
    D_FF inst7 (a[7],clk,preset,clear,out[7]);
    
    D_FF inst8 (a[8],clk,preset,clear,out[8]);
    D_FF inst9 (a[9],clk,preset,clear,out[9]);
    D_FF inst10 (a[10],clk,preset,clear,out[10]);
    D_FF inst11 (a[11],clk,preset,clear,out[11]);
    
    D_FF inst12 (a[12],clk,preset,clear,out[12]);
    D_FF inst13 (a[13],clk,preset,clear,out[13]);
    D_FF inst14 (a[14],clk,preset,clear,out[14]);
    D_FF inst15 (a[15],clk,preset,clear,out[15]);
    
endmodule

module full_adder(
    input a,b,cin,
    output sum,carry
    );
    
    assign sum = a^b^cin,
           carry = ((a^b)&cin)|(a&b);
           
endmodule

    // Subtractor circuit 
module sub_16_bit (a, b,cin, carry, rslt);   // a msut be greater than b  ... a >= b

    input [15:0] a, b;
    input cin;
    output carry;
    output [15:0] rslt;
    
    full_adder inst0 (a[0],~b[0],cin,rslt[0],carry_0);
    full_adder inst1 (a[1],~b[1],carry_0,rslt[1],carry_1);
    full_adder inst2 (a[2],~b[2],carry_1,rslt[2],carry_2);
    full_adder inst3 (a[3],~b[3],carry_2,rslt[3],carry_3);
    
    full_adder inst4 (a[4],~b[4],carry_3,rslt[4],carry_4);
    full_adder inst5 (a[5],~b[5],carry_4,rslt[5],carry_5);
    full_adder inst6 (a[6],~b[6],carry_5,rslt[6],carry_6);
    full_adder inst7 (a[7],~b[7],carry_6,rslt[7],carry_7);
    
    full_adder inst8(a[8],~b[8],carry_7,rslt[8],carry_8);
    full_adder inst9(a[9],~b[9],carry_8,rslt[9],carry_9);
    full_adder inst10(a[10],~b[10],carry_9,rslt[10],carry_10);
    full_adder inst11(a[11],~b[11],carry_10,rslt[11],carry_11);
    
    full_adder inst12(a[12],~b[12],carry_11,rslt[12],carry_12);
    full_adder inst13(a[13],~b[13],carry_12,rslt[13],carry_13);
    full_adder inst14(a[14],~b[14],carry_13,rslt[14],carry_14);
    full_adder inst15(a[15],~b[15],carry_14,rslt[15],carry);
    
endmodule

module sub_32_bit (a, b, rslt);
    
    input [31:0] a,b; 
    output [31:0] rslt;
    
    wire carry,carry_2;
    reg cin = 1'b1;
    sub_16_bit sub_1x15 (a[15:0], b[15:0], cin ,carry, rslt[15:0]);
    sub_16_bit sub_16x32 (a[31:16], b[31:16], carry ,carry_2, rslt[31:16]);
    
endmodule

module four_bit(
    input [3:0] a , b , 
    input cin,
    output [3:0] sum,
    output carry 
    );
    
    wire [3:0] c;
    
    full_adder inst_0 (a[0], b[0], cin, sum[0] , c[0]);
    full_adder inst_1 (a[1], b[1], c[0], sum[1] , c[1]);
    full_adder inst_2 (a[2], b[2], c[1], sum[2] , c[2]);
    full_adder inst_3 (a[3], b[3], c[2], sum[3] , carry);
    
endmodule

module adder_32_bit (            // 32 bit adder
    input [31:0] a , b,
    output [31:0] sum
    );
    reg cin = 1'b0;
    wire [7:0] c;
    
    four_bit inst0 (a[3:0], b[3:0], cin, sum[3:0], c[0] );
    four_bit inst1 (a[7:4], b[7:4], c[0], sum[7:4], c[1] );
    
    four_bit inst2 (a[11:8], b[11:8], c[1], sum[11:8], c[2] );
    four_bit inst3 (a[15:12], b[15:12], c[2], sum[15:12], c[3] );
    
    four_bit inst4 (a[19:16], b[19:16], c[3], sum[19:16], c[4] );
    four_bit inst5 (a[23:20], b[23:20], c[4], sum[23:20], c[5] );
    
    four_bit inst6 (a[27:24], b[27:24], c[5], sum[27:24], c[6] );
    four_bit inst7 (a[31:28], b[31:28], c[6], sum[31:28], c[7] );
    
endmodule

// 32 bit multiplier 
module multiplier_32_bit(
    input [15:0] a , b,
    output [31:0] prod 
    );
    wire [31:0] c_out0,c_out1,c_out2,c_out3,c_out4,c_out5,c_out6,c_out7,c_out8,c_out9,c_out10,
                c_out11,c_out12,c_out13,c_out14,c_out15;
                
    wire [31:0] sum0,sum1,sum2,sum3,sum4,sum5,sum6,sum7;
    wire [31:0] sum10,sum11,sum12,sum13;
    wire [31:0] sum20,sum21;
                
    mul_16x1 inst0 (a,b[0],c_out0);
    mul_16x1 inst1 (a,b[1],c_out1);
    mul_16x1 inst2 (a,b[2],c_out2);
    mul_16x1 inst3 (a,b[3],c_out3);
    mul_16x1 inst4 (a,b[4],c_out4);
    mul_16x1 inst5 (a,b[5],c_out5);
    mul_16x1 inst6 (a,b[6],c_out6);
    mul_16x1 inst7 (a,b[7],c_out7);
    mul_16x1 inst8 (a,b[8],c_out8);
    mul_16x1 inst9 (a,b[9],c_out9);
    mul_16x1 inst10 (a,b[10],c_out10);
    mul_16x1 inst11 (a,b[11],c_out11);
    mul_16x1 inst12 (a,b[12],c_out12);
    mul_16x1 inst13 (a,b[13],c_out13);
    mul_16x1 inst14 (a,b[14],c_out14);
    mul_16x1 inst15 (a,b[15],c_out15);
    
    adder_32_bit sum_0 (c_out0 , c_out1 << 1 ,sum0);   // shift least significant bit to right shift
    adder_32_bit sum_1 (c_out2 , c_out3 << 1 ,sum1);   // eg :- 0011   to   0110
    adder_32_bit sum_2 (c_out4 , c_out5 << 1 ,sum2);
    adder_32_bit sum_3 (c_out6 , c_out7 << 1 ,sum3);
    
    adder_32_bit sum_4 (c_out8 , c_out9 << 1 ,sum4);
    adder_32_bit sum_5 (c_out10 , c_out11 << 1 ,sum5);
    adder_32_bit sum_6 (c_out12 , c_out13 << 1 ,sum6);
    adder_32_bit sum_7 (c_out14 , c_out15 << 1 ,sum7);
    
    
    adder_32_bit sum_8 (sum0 , sum1 << 2 ,sum10);
    adder_32_bit sum_9 (sum2 , sum3 << 2 ,sum11);
    adder_32_bit sum_10 (sum4 , sum5 << 2 ,sum12);
    adder_32_bit sum_11 (sum6 , sum7 << 2 ,sum13);
    
    
    adder_32_bit sum_12 (sum10 , sum11 << 4 ,sum20);
    adder_32_bit sum_13 (sum12 , sum13 << 4 ,sum21);
    
    
    adder_32_bit sum_14 (sum20 , sum21 << 8 ,prod);
    
    
endmodule

module tic_tac (
    input start,              // when start = 1 it means ready to take value
    input clk,preset,clear,
    output ready,clr,load      
    );
    
    wire D0,D1,D2 ;
    
    assign D0 = (load & clr),
           D1 = (~load & clr),
           D2 = (ready);
    
    D_FF inst0  (D0,clk,start,clear, ready );
    D_FF inst1 (D1,clk,preset,start, load );
    D_FF inst2 (D2,clk,preset,start, clr);
    
endmodule

module mod_18(
    input clk,preset,clear,
    output [4:0] Q
    );
    wire [4:0] D;
    
    assign D[0] =  ~Q[0],
           D[1] = (~Q[1] & Q[0]) | (Q[1] & ~Q[0]),
           D[2] = (Q[2] & ~Q[1]) | (Q[2] & ~Q[0]) | (~Q[2] & Q[1] & Q[0]),
           D[3] = (Q[3] & ~Q[2]) | (Q[3] & ~Q[1]) | (Q[3] & ~Q[0]) | (~Q[3] & Q[2] & Q[1] & Q[0]),
           D[4] = (Q[3] & Q[2] & Q[1] & Q[0]) | (Q[4] & ~Q[1]) | (Q[4] & ~Q[3] & ~Q[2] & Q[1] & ~Q[0]);
           
           D_FF inst0 (D[0],clk,preset,clear,Q[0]);
           D_FF inst1 (D[1],clk,preset,clear,Q[1]);
           D_FF inst2 (D[2],clk,preset,clear,Q[2]);
           D_FF inst3 (D[3],clk,preset,clear,Q[3]);
           D_FF inst4 (D[4],clk,preset,clear,Q[4]);
    
endmodule

module division_16_bit (
    input [15:0] a,b,
    input clk,preset,clear,Trig,
    output [15:0] rslt,       // rslt = remainder 
    output [15:0] div_rslt
    );
    
    wire [15:0] Q;
    wire [15:0] u,out,b_out,rslt_clk;
    wire [31:0] rslt_32;
    wire [31:0] c;
    wire L_in,clr,load,carry;
    wire L,E,G;
    
    //
    wire loop_start, loop_enable, display_clk_hold, Y ;
    wire [4:0] loop_val;
    
    or #1 (Y, Trig, loop_enable);
    
    T_FF start_trig (~preset,Y,preset,clear, loop_start);
    
    mod_18 loop_18 (clk,preset,~loop_start, loop_val);
    
    assign loop_enable = loop_val[4] & ~loop_val[3] & ~loop_val[2] & loop_val[1] & loop_val[0] ; 
    
    and (display_clk_hold, loop_start , clk) ;
    //
    
    tic_tac inst66 (~loop_start,clk,preset,clear,ready,clr,load);   // when start = 1 it means ready to take value
    
    PIPO_16x1 inst0 (~preset,clk,load,preset,clr,Q);     // L    inval
    multiplier_32_bit inst1 (b , Q, c);
    
    sub_16_bit inst3 (b, b, ~preset, carry, u);
   
    mul_16x1_div inst9 (u,c[15:0], L_in ,out);         // L
    
    sub_16_bit inst2 (b_out, out, ~preset, carry, rslt);
    sub_clk_out inst31 (rslt,clk,preset,clr,rslt_clk);
    PIPO_16x2 inst48 (a,rslt,load,L_in ,clk,preset,clr,b_out);   // L
    
    assign rslt_32 = {u,rslt_clk};
    
    comparator_32_bit inst4 (c , rslt_32 ,L,E,G);
    
    // result display in this module
    SIPO display (L_in,display_clk_hold,~preset,preset,clr,div_rslt);          // ~preset means high so value can intake
    
    D_FF inst10 (L,clk,preset,start, net1 );
    and  (net2,net1,E);
    or #1 (L_in,net2,L);
    
endmodule

module ALU(
    
    input [31:0] a,b,
    input clk,preset,clear,Trig,
    input [3:0] sel,
    output equal_flag, greater_flag, smaller_flag,
    output reg [31:0] value 
    );
    
    wire [31:0] rslt,sum,prod;
    wire [15:0] div_rslt, remain;
    wire L, E, G;
    
    sub_32_bit subtractor (a, b, rslt);     // a > b &&  00
    
    adder_32_bit adder (a , b,sum);         // 01
    
    multiplier_32_bit multiplier (a[15:0] , b[15:0], prod);       // 10
    
    division_16_bit division (a[15:0] ,b[15:0] ,clk,preset,clear,Trig, remain,div_rslt);      // 11
    
    comparator_32_bit comparison (a , b ,smaller_flag,equal_flag,greater_flag);          // if a > b     greater_flag is HIGH         //00
    
    always @ (sel)
    begin
      
      case (sel)
        // arithmetic operation
        4'b0000: assign value = rslt;                      //Substraction operator
        4'b0001: assign value = sum;                       //ADD operator
        4'b0010: assign value = prod;                      //Multiplication operator
        4'b0011: assign value = {remain,div_rslt};        // Division operator    0012_4567   remainder = 0012, quotient = 4567
        4'b0100: assign value = {16'h0000,div_rslt};     //modulo operator
        
        //bitwise operation
        
        4'b0101: assign value = a & b;          // bitwise AND operation
        4'b0110: assign value = a | b;          // bitwise OR operation
        4'b0111: assign value = ~(a & b);      // bitwise NAND operation
        4'b1000: assign value = ~(a | b);     // bitwise NOR operation
        
        4'b1001: assign value = a ^ b;        // bitwise XOR operation 
        4'b1010: assign value = ~(a ^ b);     // bitwise XNOR operation 
        4'b1011: assign value = ~a ;          // bitwise not operation

        
        //logical operation
        4'b1100: assign value = (a && b);    // logical AND
        4'b1101: assign value = (a || b);    // logical OR
        4'b1110: assign value = (a << 1);   // shift left of a      eg :- 0011   to   0110
        4'b1111: assign value = (a >> 1);   // shift right of a     eg :- 1011   to   0101
        
      endcase
      
    end
    
endmodule
